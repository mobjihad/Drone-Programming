import cv2 as cv
import numpy as np
from djitellopy import Tello
import time

drone = Tello()
drone.connect()

print(drone.get_battery())

drone.streamon()
drone.takeoff()
drone.send_rc_control(0,0,20,0)
time.sleep(2.2)

w,h = 360,240
fbRange = [6200, 6800]
pid = [0.4 , 0.4, 0]
pError = 0


def findFace(img):
    faceCascade = cv.CascadeClassifier("Resources/haarcascade_frontalface_default.xml")
    imgray = cv.cvtColor(img, cv.COLOR_BGR2GRAY)
    faces = faceCascade.detectMultiScale(imgray, 1.2 , 8)

    myFacelistC = []
    myFaceListArea = []

    for (x,y,w,h) in faces:
        cv.rectangle(img, (x,y), (x+w , y+h ), (0,0,255),2)
        cx = x+ w//2
        cy = y + h//2
        area = w* h
        cv.circle(img, (cx,cy),5,(0,255,0),cv.FILLED)
        myFacelistC.append([cx,cy])
        myFaceListArea.append(area)
    if len(myFaceListArea) != 0:
        i= myFaceListArea.index(max(myFaceListArea))

        return img, [myFacelistC[i], myFaceListArea[i]]
    else:
        return img, [[0,0],0]

def trackFace(info , w, pid, pError):

    area = info[1]

    x,y = info[0]
    fb =0

    error = x- w//2
    speed = pid[0]*error + pid[1]* (error - pError)
    speed = int(np.clip(speed, -100,100))

    if area > fbRange[0] and area <fbRange[1]:
        fb = 0

    elif area>fbRange[1]:
        fb =-20
    elif area< fbRange[0] and area != 0 :
        fb = 20
    if x ==0:
        speed = 0
        error = 0

    drone.send_rc_control(0,fb,0,speed)
    return error



#cap = cv.VideoCapture(0)

while True:
    #isTrue, img = cap.read()
    img = drone.get_frame_read().frame
    img = cv.resize(img,(w,h))
    img , info = findFace(img)
    pError = trackFace(info,w,pid,pError)
    print("Area", info[1])
    cv.imshow("Video",img)
    if cv.waitKey(1) & 0xFF == ord('q'):
        drone.land()
        break